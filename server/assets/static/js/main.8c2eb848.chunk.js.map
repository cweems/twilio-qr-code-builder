{"version":3,"sources":["App.tsx","reportWebVitals.ts","components/Loading.tsx","index.tsx"],"names":["App","children","Provider","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","console","error","Loading","as","decorative","title","Index","React","phoneNumber","keyword","smsQrCodeComponents","setSmsQrCodeComponents","smsQrCodeText","setSmsQrCodeText","sender","message","whatsAppQrCodeComponents","setWhatsAppQrCodeComponents","whatsAppQrCodeText","setWhatsAppQrCodeText","phoneQrCodeText","setPhoneQrCodeText","address","subject","body","emailQrCodeComponents","setEmailQrCodeComponents","emailQrCodeText","setEmailQrCodeText","selectedId","useUID","handleQrCodeDownload","elementId","svg","document","getElementById","firstChild","svgAsXML","XMLSerializer","serializeToString","dataString","encodeURIComponent","link","createElement","href","download","appendChild","dispatchEvent","MouseEvent","bubbles","cancelable","view","window","removeChild","fallback","padding","maxWidth","style","margin","variant","orientation","baseId","id","display","alignItems","ProductMessagingIcon","marginLeft","spacing","marginBottom","htmlFor","required","name","type","placeholder","onChange","event","qrText","handleSmsToNumberChange","target","value","handleSmsKeywordChange","marginTop","onClick","DownloadIcon","backgroundColor","color","NewIcon","transform","stroke","fill","height","width","viewBox","xmlns","d","handleWhatsAppToNumberChange","handleWhatsAppKeywordChange","ProductVoiceIcon","ProductEmailAPIIcon","e","handleEmailAddressChange","handleEmailSubjectChange","handleEmailBodyChange","ReactDOM","querySelector","log"],"mappings":"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","file":"static/js/main.8c2eb848.chunk.js","sourcesContent":["import * as React from 'react';\nimport {Theme} from '@twilio-paste/core/theme';\n\nconst App: React.FC = ({children}) => {\n  return <Theme.Provider theme=\"default\">{children}</Theme.Provider>;\n};\n\nexport default App;\n","import type {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n      .then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n        getCLS(onPerfEntry, true);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry, true);\n        getTTFB(onPerfEntry);\n        return true;\n      })\n      .catch(() => console.error('web vitals import error'));\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport {Spinner} from '@twilio-paste/core/spinner';\nimport {Box} from '@twilio-paste/core/box';\n\nexport const Loading: React.FC = () => {\n  return (\n    <Box as=\"div\">\n      <Spinner decorative={false} title=\"Loading\" />\n    </Box>\n  );\n};\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {Stack} from '@twilio-paste/core/stack';\nimport {Paragraph} from '@twilio-paste/core/paragraph';\nimport {Heading} from '@twilio-paste/core/heading';\nimport {Card} from '@twilio-paste/core/card';\nimport {Box} from '@twilio-paste/core/box';\nimport {Label, Input, HelpText, Column, Grid, Button} from '@twilio-paste/core';\nimport {Tabs, TabList, Tab, TabPanels, TabPanel} from '@twilio-paste/core/tabs';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {useUID} from '@twilio-paste/uid-library';\nimport {Loading} from './components/Loading';\n\nimport { ProductEmailAPIIcon } from \"@twilio-paste/icons/esm/ProductEmailAPIIcon\";\nimport { ProductVoiceIcon } from \"@twilio-paste/icons/esm/ProductVoiceIcon\";\nimport { ProductMessagingIcon } from \"@twilio-paste/icons/esm/ProductMessagingIcon\";\nimport { NewIcon } from \"@twilio-paste/icons/esm/NewIcon\";\nimport { DownloadIcon } from \"@twilio-paste/icons/esm/DownloadIcon\";\n\nimport QRCode from \"react-qr-code\";\n\nexport const Index: React.FC = () => {\n  const [smsQrCodeComponents, setSmsQrCodeComponents] = React.useState({phoneNumber: '', keyword: ''});\n  const [smsQrCodeText, setSmsQrCodeText] = React.useState(\"SMSTO:none:none\")\n  const [whatsAppQrCodeComponents, setWhatsAppQrCodeComponents] = React.useState({sender: '', message: ''});\n  const [whatsAppQrCodeText, setWhatsAppQrCodeText] = React.useState(\"https://wa.me/<number>?text=<urlencodedtext>\");\n  const [phoneQrCodeText, setPhoneQrCodeText] = React.useState(\"tel:+14135555555\");\n  const [emailQrCodeComponents, setEmailQrCodeComponents] = React.useState({address: '', subject: '', body: ''});\n  const [emailQrCodeText, setEmailQrCodeText] = React.useState(\"mailto:email@example.com?subject=Subject&body=Body\");\n  const selectedId = useUID();\n\n  const handleSmsToNumberChange = (phoneNumber: string) => {\n    smsQrCodeComponents.phoneNumber = phoneNumber;\n    const qrText = `SMSTO:${phoneNumber}:${smsQrCodeComponents.keyword}`;\n    setSmsQrCodeText(qrText);\n    setSmsQrCodeComponents(smsQrCodeComponents);\n  }\n\n  const handleSmsKeywordChange = (keyword: string) => {\n    smsQrCodeComponents.keyword = keyword;\n    const qrText = `SMSTO:${smsQrCodeComponents.phoneNumber}:${keyword}`;\n    setSmsQrCodeText(qrText);\n    setSmsQrCodeComponents(smsQrCodeComponents);\n  }\n\n  const handleQrCodeDownload = (elementId: string) => {\n    const svg = document.getElementById(elementId)?.firstChild as HTMLCanvasElement;\n\n    var svgAsXML = (new XMLSerializer).serializeToString(svg);\n    const dataString = \"data:image/svg+xml,\" + encodeURIComponent(svgAsXML);\n    const link = document.createElement(\"a\");\n\n    link.href = dataString;\n    link.download = `${elementId}.svg`;\n\n    document.body.appendChild(link);\n\n    link.dispatchEvent(\n      new MouseEvent('click', { \n        bubbles: true, \n        cancelable: true, \n        view: window \n      })\n    );\n    document.body.removeChild(link);\n  }\n\n  const handlePhoneCallChange = (phoneNumber: string) => {\n    setPhoneQrCodeText(`tel:${phoneNumber}`);\n  }\n\n  const handleWhatsAppToNumberChange = (sender: string) => {\n    whatsAppQrCodeComponents.sender = sender;\n    const qrText = `https://wa.me/${sender}?text=${encodeURIComponent(whatsAppQrCodeComponents.message)}`;\n    setWhatsAppQrCodeText(qrText);\n    setWhatsAppQrCodeComponents(whatsAppQrCodeComponents);\n  }\n\n  const handleWhatsAppKeywordChange = (message: string) => {\n    whatsAppQrCodeComponents.message = message;\n    const qrText = `https://wa.me/${whatsAppQrCodeComponents.sender}?text=${encodeURIComponent(message)}`;\n    setWhatsAppQrCodeText(qrText);\n    setWhatsAppQrCodeComponents(whatsAppQrCodeComponents);\n  }\n\n  const handleEmailAddressChange = (address: string) => {\n    emailQrCodeComponents.address = address;\n    const qrText = `mailto:${emailQrCodeComponents.address}?subject=${emailQrCodeComponents.subject}&body=${emailQrCodeComponents.body}`;\n\n    setEmailQrCodeText(qrText);\n    setEmailQrCodeComponents(emailQrCodeComponents);\n  }\n\n  const handleEmailSubjectChange = (subject: string) => {\n    emailQrCodeComponents.subject = subject;\n    const qrText = `mailto:${emailQrCodeComponents.address}?subject=${emailQrCodeComponents.subject}&body=${emailQrCodeComponents.body}`\n\n    setEmailQrCodeText(qrText);\n    setEmailQrCodeComponents(emailQrCodeComponents);\n  }\n\n  const handleEmailBodyChange = (body: string) => {\n    emailQrCodeComponents.body = body;\n    const qrText = `mailto:${emailQrCodeComponents.address}?subject=${emailQrCodeComponents.subject}&body=${emailQrCodeComponents.body}`\n\n    setEmailQrCodeText(qrText);\n    setEmailQrCodeComponents(emailQrCodeComponents);\n  }\n\n  return (\n    <App>\n      <React.Suspense fallback={<Loading />}>\n        <Box padding=\"space100\" maxWidth=\"1000px\" style={{margin: '0 auto'}}>\n        <Heading variant=\"heading10\" as=\"h1\">Twilio QR Code Builder</Heading>\n        <Tabs orientation=\"vertical\" selectedId={selectedId} baseId=\"vertical-tabs-example\">\n            <TabList aria-label=\"Vertical product tabs\">\n              <Tab id={selectedId}>SMS QR Code</Tab>\n              <Tab>WhatsApp QR Code</Tab>\n              <Tab>Phone Call QR Code</Tab>\n              <Tab>Email QR Code</Tab>\n            </TabList>\n            <TabPanels>\n              <TabPanel>\n                <Heading as=\"h3\" variant=\"heading30\">\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <ProductMessagingIcon decorative={true} title=\"Phone icon\" />\n                    <Box marginLeft=\"space20\">SMS QR Code</Box>\n                  </Box>\n                </Heading>\n                <Stack orientation=\"vertical\" spacing=\"space60\">\n                  <Card>\n                    <Box marginBottom=\"space40\">\n                      <Label htmlFor=\"to_phone_number\" required>To Phone Number</Label>\n                      <Input aria-describedby=\"to_phone_number_help_text\" id=\"to_phone_number\" name=\"to_phone_number\" type=\"text\" placeholder=\"+14135555555\" onChange={(event) => handleSmsToNumberChange(event.target.value)} required/>\n                      <HelpText id=\"to_phone_number_help_text\">The number that your QR code users will send an SMS to. This can be a 10-digit local number, toll-free number, or short code. See your <a href=\"https://console.twilio.com/us1/develop/phone-numbers/manage/active?frameUrl=%2Fconsole%2Fphone-numbers%2Fincoming%3Fx-target-region%3Dus1\">available Twilio numbers in the console.</a></HelpText>\n                    </Box>\n                    <Box>\n                      <Label htmlFor=\"sms_keyword\" required>SMS Pre-filled Message</Label>\n                      <Input aria-describedby=\"sms_keyword_help_text\" id=\"sms_keyword\" name=\"sms_keyword\" type=\"text\" placeholder=\"e.g. Home 15, Bus Stop 1207, Volunteer\" onChange={(event) => handleSmsKeywordChange(event.target.value)} required/>\n                      <HelpText id=\"sms_keyword_help_text\">The prefilled message or keyword that will pre-populate in the user's SMS app.</HelpText>\n                    </Box>      \n                  </Card>\n                  <Card>\n                    <Box display=\"flex\">\n                      <Grid>\n                        <Column>\n                          <Box id=\"sms-qr-code\">\n                            <QRCode value={smsQrCodeText} />\n                          </Box>\n                          <Box marginTop=\"space30\">\n                            <Button variant=\"primary\" onClick={() => handleQrCodeDownload(\"sms-qr-code\") }><DownloadIcon decorative={false} title=\"Download icon\" /> Download SVG</Button>\n                          </Box>\n                        </Column>\n                        <Column>\n                          <Box display=\"flex\" alignItems=\"center\" backgroundColor=\"colorBackgroundPrimary\" color=\"colorTextBrandInverse\" padding=\"space60\">\n                            <NewIcon decorative={false} title=\"Try it out icon\" />\n                            <Box marginLeft=\"space20\">\n                              Try it out! Open your phone's camera app and scan your QR code.\n                            </Box>\n                          </Box>\n                          <svg style={{transform: \"rotate(240deg)\"}} stroke=\"rgb(2, 99, 224)\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2.7\" stroke-dashoffset=\"0\" stroke-dasharray=\"250 250\" fill=\"none\" height=\"176\" width=\"75\" viewBox=\"0 0 85 196\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m344.148655 2159.0516-19.1052-24.0516 29.0358 1.512m-12.636 190.8252c69.120001-25.92 101.520001-132.3 0-184.14\" transform=\"matrix(-1 0 0 1 408.043 -2133)\"></path></svg>\n                        </Column>\n                      </Grid>\n                    </Box>\n                  </Card>\n                </Stack>\n              </TabPanel>\n              <TabPanel>\n                <Heading as=\"h3\" variant=\"heading30\">\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <ProductMessagingIcon decorative={true} title=\"Whatsapp icon\" />\n                    <Box marginLeft=\"space20\">WhatsApp QR Code</Box>\n                  </Box>\n                </Heading>\n                <Stack orientation=\"vertical\" spacing=\"space60\">\n                  <Card>\n                    <Box marginBottom=\"space40\">\n                      <Label htmlFor=\"whatsapp_number\" required>To WhatsApp Contact</Label>\n                      <Input aria-describedby=\"whatsapp_number_help_text\" id=\"whatsapp_number\" name=\"whatsapp_number\" type=\"text\" placeholder=\"14135555555\" onChange={(event) => handleWhatsAppToNumberChange(event.target.value)} required/>\n                      <HelpText id=\"whatsapp_number_help_text\">The WhatsApp sender that your QR code users will send a message to. Use international format with no dashes, parentheses, spaces, etc. See your <a href=\"https://console.twilio.com/us1/develop/sms/senders/whatsapp-senders?frameUrl=%2Fconsole%2Fsms%2Fwhatsapp%2Fsenders%3Fx-target-region%3Dus1\">available Twilio WhatsApp senders in the console.</a></HelpText>\n                    </Box>\n                    <Box>\n                      <Label htmlFor=\"sms_keyword\" required>Whatsapp Prefilled Message</Label>\n                      <Input aria-describedby=\"sms_keyword_help_text\" id=\"sms_keyword\" name=\"sms_keyword\" type=\"text\" placeholder=\"e.g. Home 15, Bus Stop 1207, Volunteer\" onChange={(event) => handleWhatsAppKeywordChange(event.target.value)} required/>\n                      <HelpText id=\"sms_keyword_help_text\">The prefilled message or keyword that will pre-populate in WhatsApp.</HelpText>\n                    </Box>      \n                  </Card>\n                  \n                  <Card>\n                    <Box display=\"flex\">\n                      <Grid>\n                        <Column>\n                          <Box id=\"whatsapp-qr-code\">\n                            <QRCode value={whatsAppQrCodeText} />\n                          </Box>\n                          <Box marginTop=\"space30\">\n                            <Button variant=\"primary\" onClick={() => handleQrCodeDownload(\"whatsapp-qr-code\") }><DownloadIcon decorative={false} title=\"Download icon\" /> Download SVG</Button>\n                          </Box>\n                        </Column>\n                        <Column>\n                          <Box display=\"flex\" alignItems=\"center\" backgroundColor=\"colorBackgroundPrimary\" color=\"colorTextBrandInverse\" padding=\"space60\">\n                            <NewIcon decorative={false} title=\"Try it out icon\" />\n                            <Box marginLeft=\"space20\">\n                              Try it out! Open your phone's camera app and scan your QR code.\n                            </Box>\n                          </Box>\n                          <svg style={{transform: \"rotate(240deg)\"}} stroke=\"rgb(2, 99, 224)\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2.7\" stroke-dashoffset=\"0\" stroke-dasharray=\"250 250\" fill=\"none\" height=\"176\" width=\"75\" viewBox=\"0 0 85 196\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m344.148655 2159.0516-19.1052-24.0516 29.0358 1.512m-12.636 190.8252c69.120001-25.92 101.520001-132.3 0-184.14\" transform=\"matrix(-1 0 0 1 408.043 -2133)\"></path></svg>\n                        </Column>\n                      </Grid>\n                    </Box>\n                  </Card>\n                </Stack>\n              </TabPanel>\n              <TabPanel>\n                <Heading as=\"h3\" variant=\"heading30\">\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <ProductVoiceIcon decorative={true} title=\"Phone icon\" />\n                    <Box marginLeft=\"space20\">Phone Call QR Code</Box>\n                  </Box>\n                </Heading>\n                <Stack orientation=\"vertical\" spacing=\"space60\">\n                  <Card>\n                    <Box>\n                      <Label htmlFor=\"voice_phone_nubmber\" required>To Phone Number</Label>\n                      <Input aria-describedby=\"voice_phone_nubmber_help_text\" id=\"voice_phone_nubmber\" name=\"voice_phone_nubmber\" type=\"text\" placeholder=\"+14135555555\" onChange={(event) => handlePhoneCallChange(event.target.value)} required/>\n                      <HelpText id=\"voice_phone_nubmber_help_text\">The number that will be called when the QR code is scanned. See your <a href=\"https://console.twilio.com/us1/develop/phone-numbers/manage/active?frameUrl=%2Fconsole%2Fphone-numbers%2Fincoming%3Fx-target-region%3Dus1\">available Twilio numbers in the console.</a></HelpText>\n                    </Box>      \n                  </Card>\n                  <Card>\n                    <Box display=\"flex\">\n                      <Grid>\n                        <Column>\n                          <Box id=\"phone-qr-code\">\n                            <QRCode value={phoneQrCodeText} />\n                          </Box>\n                          <Box marginTop=\"space30\">\n                            <Button variant=\"primary\" onClick={() => handleQrCodeDownload(\"phone-qr-code\") }><DownloadIcon decorative={false} title=\"Download icon\" /> Download SVG</Button>\n                          </Box>\n                        </Column>\n                        <Column>\n                          <Box display=\"flex\" alignItems=\"center\" backgroundColor=\"colorBackgroundPrimary\" color=\"colorTextBrandInverse\" padding=\"space60\">\n                            <NewIcon decorative={false} title=\"Try it out icon\" />\n                            <Box marginLeft=\"space20\">\n                              Try it out! Open your phone's camera app and scan your QR code.\n                            </Box>\n                          </Box>\n                          <svg style={{transform: \"rotate(240deg)\"}} stroke=\"rgb(2, 99, 224)\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2.7\" stroke-dashoffset=\"0\" stroke-dasharray=\"250 250\" fill=\"none\" height=\"176\" width=\"75\" viewBox=\"0 0 85 196\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m344.148655 2159.0516-19.1052-24.0516 29.0358 1.512m-12.636 190.8252c69.120001-25.92 101.520001-132.3 0-184.14\" transform=\"matrix(-1 0 0 1 408.043 -2133)\"></path></svg>\n                        </Column>\n                      </Grid>\n                    </Box>\n                  </Card>\n                </Stack>\n              </TabPanel>\n              <TabPanel>\n                <Heading as=\"h3\" variant=\"heading30\">\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <ProductEmailAPIIcon decorative={true} title=\"Email icon\" />\n                    <Box marginLeft=\"space20\">Email QR Code</Box>\n                  </Box>\n                </Heading>\n                <Stack orientation=\"vertical\" spacing=\"space60\">\n                  <Card>\n                    <Box marginBottom=\"space40\">\n                      <Label htmlFor=\"email_address\" required>Email Address</Label>\n                      <Input aria-describedby=\"email_address_help_text\" id=\"email_address\" name=\"email_address\" type=\"text\" placeholder=\"customer-care@mysite.com\" onChange={(e) => handleEmailAddressChange(e.target.value)} required/>\n                      <HelpText id=\"email_address_help_text\">The email address that the QR code should send a message to.</HelpText>\n                    </Box>\n                    <Box marginBottom=\"space40\">\n                      <Label htmlFor=\"email_subject\" required>Email Subject</Label>\n                      <Input aria-describedby=\"email_subject_help_text\" id=\"email_subject\" name=\"email_subject\" type=\"text\" placeholder=\"e.g. Feedback from store #3002\" onChange={(e) => handleEmailSubjectChange(e.target.value)} required/>\n                      <HelpText id=\"email_subject_help_text\">The keyword that will pre-populate in the user's SMS app.</HelpText>\n                    </Box>\n                    <Box>\n                      <Label htmlFor=\"email_body\" required>Email Body</Label>\n                      <Input aria-describedby=\"email_body_help_text\" id=\"email_body\" name=\"email_body\" type=\"text\" placeholder=\"e.g. [your message here]\" onChange={(e) => handleEmailBodyChange(e.target.value)} required/>\n                      <HelpText id=\"email_body_help_text\">The pre-populated email body message that you would like to send.</HelpText>\n                    </Box>      \n                  </Card>\n                  <Card>\n                    <Box display=\"flex\">\n                      <Grid>\n                        <Column>\n                          <Box id=\"email-qr-code\">\n                            <QRCode value={emailQrCodeText} />\n                          </Box>\n                          <Box marginTop=\"space30\">\n                            <Button variant=\"primary\" onClick={() => handleQrCodeDownload(\"email-qr-code\") }><DownloadIcon decorative={false} title=\"Download icon\" /> Download SVG</Button>\n                          </Box>\n                        </Column>\n                        <Column>\n                          <Box display=\"flex\" alignItems=\"center\" backgroundColor=\"colorBackgroundPrimary\" color=\"colorTextBrandInverse\" padding=\"space60\">\n                            <NewIcon decorative={false} title=\"Try it out icon\" />\n                            <Box marginLeft=\"space20\">\n                              Try it out! Open your phone's camera app and scan your QR code.\n                            </Box>\n                          </Box>\n                          <svg style={{transform: \"rotate(240deg)\"}} stroke=\"rgb(2, 99, 224)\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2.7\" stroke-dashoffset=\"0\" stroke-dasharray=\"250 250\" fill=\"none\" height=\"176\" width=\"75\" viewBox=\"0 0 85 196\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m344.148655 2159.0516-19.1052-24.0516 29.0358 1.512m-12.636 190.8252c69.120001-25.92 101.520001-132.3 0-184.14\" transform=\"matrix(-1 0 0 1 408.043 -2133)\"></path></svg>\n                        </Column>\n                      </Grid>\n                    </Box>\n                  </Card>\n                </Stack>\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </Box>\n      </React.Suspense>\n    </App>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Index />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n\n/**\n * If you want to start measuring performance in your app, pass a function\n * to log results (for example: reportWebVitals(console.log))\n * or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n */\n// eslint-disable-next-line no-console\nreportWebVitals(console.log);\n"],"sourceRoot":""}